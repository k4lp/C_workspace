#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>

#define SIZE 100

typedef struct _node {
	char data[SIZE];
	int top;
} node;

node *pu = NULL;

void initialize() {
	pu = (node *)malloc(sizeof(node));
	pu->top = -1;
}

int isempty() {
	if(pu->top == -1)
		return 1;
	else
		return 0;
}

int isfull() {
	if(pu->top == SIZE - 1)
		return 1;
	else
		return 0;
}

void push(char x) {
	if(isfull()) {
		printf("\nStack Overflow.");
		return;
	}
	else {
		pu->data[++pu->top] = x;
	}
}

char pop() {
	if(isempty()) {
		printf("\nStack Underflow");
		return 0;
	}
	else {
		return pu->data[pu->top--];
	}
}

int precedence(char x) {

	if( x == '+' || x == '-')
		return 1;
	else if( x == '*' || x == '/')
		return 2;
	else if( x == '^' )
		return 3;
	else
		return 9;
}

char peek() {
	if(isempty()){
		printf("\nStack Underflow.");
		return 0;
	}
	else {
		return pu->data[pu->top];
	}
}

void display() {
	int i = 0;
	printf("\n");
	for(i = pu->top ; i != -1 ; i --)
	{
		printf("%c ", pu->data[i]);
	}
	return;
}

void intopostfix(const char *exp,char *post) {
	int i=0,j =0;
	initialize();
	for(;exp[i]!='\0';i++) {
		if(isalpha(exp[i]) || isempty()) {
			post[j++] = exp[i];
		}
		else if(isdigit(exp[i]) && (precedence(exp[i]) > precedence(peek()))) {
			push(exp[i]);
		}
		else {
			do {
				post[j++] = pop();
			}while( !isempty());
			push(exp[i]);
		}
	}
	do {
		post[j++] = pop();
	} while(!isempty());
}

int main() {
	char ex[100] , post[100];
	scanf(" %[^\n]",ex);
	intopostfix(ex,post);
	printf("\n%s",post);
}
