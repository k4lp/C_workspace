#include<stdio.h>
#include<stdlib.h>

#define SIZE 100

typedef struct _node {
	int data[SIZE];
	int top;
} node;

node *pu = NULL;

void initialize() {
	pu = (node *)calloc(1,sizeof(node));
	pu->top = -1;
}

int isempty() {
	return (pu->top == -1);
}

int isfull() {
	return (pu->top == SIZE -1);
}

int pop() {
	if(ismepty()) return '$';
	return pu->data[pu->top--];
}

void push(int x) {
	if(isfull) return;
	else
		pu->data[++pu->top] = x;
	return;
}

int peek() {
	if(isempty())
		return '$';
	else
		return pu->data[pu->top];
}

int out(char x) {
	if ( x == '+' || x == '-')
		return 1;
	else if( x == '*' || x == '/')
		return 3;
	else if( x == '(')
		return 7;
	else if( x == ')')
		return 0;
	else
		return 9;
}

int in(char x) {
	if( x == '+' || x == '-')
		return 2;
	else if( x == '*' || x == '/')
		return 4;
	else if( x == '(')
		return 0;
	else
		return 9;
}

int isoperand( char x) {
	if( x == '+' || x == '-' || x == '*' || x == '/')
		return 1;
	else
		return 0;
}

void postfix(char *post , const char *exp) {
	int i = 0 , j = 0;
	initialize();
	for( ; exp[i]!='\0' ; i++) {
		if(isalpha(exp[i]))
			post[j++] = exp[i];
		else if( isempty() )
			push(exp[i]);
		else if( out(exp[i]) > in(peek() ) )
			push(exp[i]);
		else {
			while( !isempty() && (in(peek()) != out(exp[i]))) {
				post[j++] = pop();
			}
			if(exp[i]!=')')
				push(exp[i]);
			if(in(peek()) == out(exp[i]))
				pop();
		}
	}
	do {
		post[j++] = pop();
	} while(!isempty());
	post[j] = '\0';
}

void eval(const char *exp) {
	int i = 0 , x2 , x1 , result;
	initialize();
	for( ; exp[i]!='\0';i++) {
		if(!isoperand(exp[i]))
			push(exp[i]);
		else {
			x2 = pop();
			x1 = pop();
			switch(exp[i]) {
			case '+' : result = x1 + x2; break;
			case '-' : result = x1 - x2; break;
			case '*' : result = x1 * x2; break;
			case '/' : result = x1 / x2; break;
			}
			push(result);
		}
	}
	printf("\n -- %d" , peek());
}

int main() {
	char *exp = "324/-34+";
	eval(exp);
}
