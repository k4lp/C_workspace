#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>

#define SIZE 100

typedef struct _node {
	char data[SIZE];
	int top;
} node;

node *pu;

void initialize() {
	pu = (node *)malloc(sizeof(node));
	pu->top = -1;
}

int isempty() {
	return (pu->top == -1);
}

void push(char x) {
	if(pu->top == SIZE - 1)
		return;
	else
		pu->data[++pu->top] = x;
}

char pop() {
	if(pu->top == -1)
		return 0;
	else
		return pu->data[pu->top--];
}

char peek() {
	return pu->data[pu->top];
}

int paranthesis( char *exp) {
	int i=0;
	for( ; exp[i]!='\0';i++) {
		if(exp[i] == '(')
			push(exp[i]);
		else if(exp[i] == ')') {
			if(isempty())
				return 0;
			else
				pop();
		}
	}
	if(isempty()) {
		return 1;
	}
	else
		return 0;
}

int precedence(char x) {
	if(x == '+' || x == '-')
		return 1;
	else if( x == '*' || x == '/')
		return 2;
	else if( x == '^')
		return 3;
	else if(isalpha(x))
		return 4;
	else
		return 9;
}

int out(char x) {
	if(x == '+' || x == '-')
		return 1;
	else if( x == '*' || x == '/')
		return 3;
	else if(x == '(')
		return 7;
	else if( x == ')')
		return 0;
	else
		return 9;
}

int in(char x) {
	if(x == '+' || x == '-')
		return 2;
	else if(x == '*' || x == '/')
		return 4;
	else if( x == '(')
		return 0;
	else return 9;
}

void naive(const char *exp, char *post) {
	int i = 0 , j = 0;
	initialize();
	for( ; exp[i] != '\0' ; i ++) {
		if(isalpha(exp[i]))
			post[j++] = exp[i];
		else if( isempty())
			push(exp[i]);
		else if( precedence(exp[i]) > precedence(peek()))
			push(exp[i]);
		else {
			do {
				post[j++] = pop();
			} while(!isempty());
			push(exp[i]);
		}
	}
	do {
		post[j++] = pop();
	} while(!isempty());
}

void advanced1(const char *exp,char *post) {
	int i = 0 , j = 0 ;
	initialize();
	for( ; exp[i]!='\0';i++) {
		if(isalpha(exp[i]))
			post[j++] = exp[i];
		else if(isempty())
			push(exp[i]);
		else if(out(exp[i]) > in(peek()))
			push(exp[i]);
		else {
			while(!isempty() && ( out(exp[i]) != in(peek()) )) {
				post[j++] = pop();
			}
			if(exp[i] != ')')
				push(exp[i]);
			if(out(exp[i]) == in(peek()))
					pop();
		}
	}
	do {
		post[j++] = pop();
	} while(!isempty());
	post[j] = '\0';
}

int notoperand(char x) {
	if( x == '+' || x == '-' || x == '*' || x == '/')
		return 1;
	else
		return 0;
}

void doshit(char *exp1) {
	char *exp="((1+3)/12)+999-(4-45)";
	int i= 0,x1 =0, x2=0,result =0;
	char post[100];
	advanced1(exp,post);
	for( ;exp[i]!='\0';i++) {
		if(!notoperand(exp[i])) {
			push(exp[i]);
		}
		else {
			x1=pop();
			x2=pop();
			switch(exp[i]) {
			case '+' :
				result = x2 + x1;
				break;
			case '-' :
				result = x2-x1;
				break;
			case '*' :
				result = x2 *x1;
				break;
			case '/' :
				result = x2/x1;
				break;
			}
			push(result);
		}
	}
	printf("\n -- %d" , pop());
}

int main() {
	char *exp = "a+b*c-d/e";
	char *exp1 = "(((a+b)-c*d)/k)+g/h)";
	char *exp2 = "((a+b)/c)+d-(g-h)";
	char post[100];
	advanced1(exp2,post);
	printf("\n%s",post);
	doshit(exp2);
	return 0;
}
